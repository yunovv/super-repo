https://hub.docker.com/

#Запустить контейнер из образа
docker run nginx:latest

#Запустить и назначить имя
docker run --name some-nginx nginx:latest

#Запустить и перенаправить локальный порт в порт контейнера
docker run --name some-nginx -p 8080:80 nginx:latest

#Запустить в фоне (detached)
docker run --name some-nginx -d -p 8080:80 nginx:latest

#Подключиться к терминалу контейнера
docker exec -it some-nginx /bin/bash

#Работающие контейнеры
docker ps

#Убить контейнер
docker kill fccdfe8e4cfd

#Список image
docker image ls

#Список контейнеров
docker container ls -a

#Удалить контейнер
docker container rm fccdfe8e4cfd

#Удалить все контейнеры
docker container ls -a | awk '{ print $1 }' | xargs docker container rm






#Dockerfile

#Build
docker build .

#Run container from builded image
docker run 87eda445703d

#Run detached with ports exposed
docker run -d -p 8080:8080 -p 9080:9080 87eda445703d

#Проверить открытые локальные порты
netstat -tulnp | grep docker

#Проверить работу сервиса в докере
curl -v localhost:8080
curl -v localhost:9080


#RUN vs ENTRYPOINT
#CMD instruction allows you to set a default command, which will be executed only when you run container without specifying a command. If Docker container runs with a command, the default command will be ignored. If Dockerfile has more than one CMD instruction, all but last CMD instructions are ignored.
#ENTRYPOINT instruction allows you to configure a container that will run as an executable. It looks similar to CMD, because it also allows you to specify a command with parameters. The difference is ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters. (There is a way to ignore ENTTRYPOINT, but it is unlikely that you will do it.)
#https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/

#Optimization
#Only the RUN, COPY, and ADD instructions create layers. Other instructions create temporary intermediate images, and ultimately do not increase the size of the build. Where possible, only copy the artifacts you need into the final image. This allows you to include extra tools and/or to debug information in your intermediate build stages, without increasing the size of the final image.
#https://docs.docker.com/storage/storagedriver/#images-and-layers
#https://tier.engineering/Tips-for-optimising-docker-build
#https://medium.com/the-agile-crafter/docker-image-optimization-from-1-16gb-to-22-4mb-53fdb4c53311
